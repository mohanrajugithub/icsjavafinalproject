package AnimalTriviaOne;

import java.awt.GridLayout;
import java.awt.Image;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.util.Collections;
import java.util.Date;

public class AnimalTriviaOne extends JFrame {
  private JLabel questionLabel;

  private JButton answer1Button;

  private JButton answer2Button;

  private JButton answer3Button;

  private JButton answer4Button;
  private Clip clip;
  private JPanel panel;
  private JPanel menuPanel;
  private JLabel clockLabel;

  private List<Question> questions;

  private int currentQuestion;

  private int score;
  
  
  

  public AnimalTriviaOne() {
    super("Animal Trivia One");
    
    try {
    	AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("C:\\Users\\Nugge\\Downloads\\Lazy-Afternoon.wav"));
        clip = AudioSystem.getClip();
        clip.open(audioInputStream);
        clip.start();
        clip.loop(Clip.LOOP_CONTINUOUSLY);
    } 
    catch (LineUnavailableException e) {
        System.out.println("The audio line is unavailable.");
    }
    catch (IOException e) {
    	e.printStackTrace();
    }
    catch (UnsupportedAudioFileException e) {
    	e.printStackTrace();
    } 
    
    
    
   
 


    setSize(1920, 1080);

    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    setResizable(true);

    questionLabel = new JLabel();
    setLayout(new BorderLayout());
    questionLabel.setFont(new Font("Comic Sans MS", Font.BOLD, 24));
    add(questionLabel, BorderLayout.NORTH);	
    ImageIcon icon3 = new ImageIcon("C:\\Users\\Nugge\\Downloads\\download-removebg-preview (7).png");
    Image image3 = icon3.getImage(); // transform it 
    Image newimg3 = image3.getScaledInstance(55, 55,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
    icon3 = new ImageIcon(newimg3);  // transform it back
    questionLabel.setIcon(icon3);
    JLabel backgroundLabel = new JLabel();
    backgroundLabel.setIcon(new ImageIcon(""));
    questionLabel.setLayout(new BorderLayout());
    questionLabel.add(backgroundLabel, BorderLayout.CENTER);

    answer1Button = new JButton();
    ImageIcon icon = new ImageIcon("C:\\\\Users\\\\Nugge\\\\Downloads\\\\images.png");
    Image image = icon.getImage(); // transform it 
    Image newimg = image.getScaledInstance(25, 25,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
    icon = new ImageIcon(newimg);  // transform it back
    answer1Button.setIcon(icon);

    answer1Button.setFont(new Font("Courier New", Font.BOLD, 18));
    answer1Button.setBackground(Color.WHITE);

    answer2Button = new JButton();
    answer2Button.setFont(new Font("Courier New", Font.BOLD, 18));
    answer2Button.setBackground(Color.WHITE);
    ImageIcon icon1 = new ImageIcon("C:\\Users\\Nugge\\Downloads\\images (1).png");
    Image image1 = icon1.getImage(); // transform it 
    Image newimg1 = image1.getScaledInstance(25, 25,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
    icon1 = new ImageIcon(newimg1);  // transform it back
    answer2Button.setIcon(icon1);

    answer3Button = new JButton();
    answer3Button.setFont(new Font("Courier New", Font.BOLD, 18));
    answer3Button.setBackground(Color.WHITE);
    ImageIcon icon2 = new ImageIcon("C:\\Users\\Nugge\\Downloads\\3 symbil.png");
    Image image2 = icon2.getImage(); // transform it 
    Image newimg2 = image2.getScaledInstance(25, 25,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
    icon2 = new ImageIcon(newimg2);  // transform it back
    answer3Button.setIcon(icon2);


    answer4Button = new JButton();
    answer4Button.setFont(new Font("Courier New", Font.BOLD, 18));
    answer4Button.setBackground(Color.WHITE);
    ImageIcon icon21 = new ImageIcon("C:\\Users\\Nugge\\Downloads\\numberfour.png");
    Image image21 = icon21.getImage(); // transform it 
    Image newimg21 = image21.getScaledInstance(25, 25,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
    icon21 = new ImageIcon(newimg21);  // transform it back
    answer4Button.setIcon(icon21);

    panel = new JPanel();
    panel.setLayout(new GridLayout(5, 2));
    panel.setBackground(new Color(137, 207, 240));

    

    panel.add(questionLabel);

    panel.add(answer1Button);

    panel.add(answer2Button);

    panel.add(answer3Button);

    panel.add(answer4Button);
    
    add(panel, BorderLayout.CENTER);

 

    questions = new ArrayList<Question>();

   

    score = 0;

    try {
    	
      BufferedReader reader = new BufferedReader(
          new FileReader("C:\\Users\\Nugge\\Downloads\\School Java work\\animals.txt"));
      
      

      String line;

      while ((line = reader.readLine()) != null) {
        String[] parts = line.split(";");

        String question = parts[0];

        String answer1 = parts[1];

        String answer2 = parts[2];

        String answer3 = parts[3];

        String answer4 = parts[4];

        int correctAnswer = Integer.parseInt(parts[5]);

        questions.add(new Question(
            question, answer1, answer2, answer3, answer4, correctAnswer));
        
        Collections.shuffle(questions, new Random());
        currentQuestion = 0;
      }

      reader.close();
      setVisible(true);
      
      

    } catch (Exception e) {
      e.printStackTrace();
    }

    answer1Button.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        checkAnswer(1);
      }
    });

    answer2Button.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        checkAnswer(2);
      }
    });

    answer3Button.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        checkAnswer(3);
      }
    });

    answer4Button.addActionListener(new ActionListener()

        {
          public void actionPerformed(ActionEvent e) {
            checkAnswer(4);
          }
        });

    nextQuestion();

    setVisible(true);
  }

  private void checkAnswer(int answer) {
    if (questions.get(currentQuestion).isCorrect(answer)) {
      JOptionPane.showMessageDialog(this, "The answer is correct! :D  +1 Point!");

      score++;

    } else {
    	
      JOptionPane.showMessageDialog(this, "Answer is incorrect :C No Points!");
    }

    currentQuestion++;

    if (currentQuestion >= questions.size()) {
    	
      JOptionPane.showMessageDialog(this, "Well Done! Your score is: " + score);
      

      System.exit(0);

    } else {
      nextQuestion();
    }
  }

  private void nextQuestion() {
    Question question = questions.get(currentQuestion);
    questionLabel.setHorizontalAlignment(JLabel.CENTER);

    questionLabel.setText(question.getQuestion());

    answer1Button.setText(question.getAnswer1());

    answer2Button.setText(question.getAnswer2());

    answer3Button.setText(question.getAnswer3());

    answer4Button.setText(question.getAnswer4());
  }

  // Main

  public static void main(String[] args) {
	  
    new AnimalTriviaOne();
    AnimalTriviaOne frame = new AnimalTriviaOne();
    frame.setVisible(false);
  }

  private class Question {
    private String question;

    private String answer1;

    private String answer2;

    private String answer3;

    private String answer4;

    private int correctAnswer;

    public Question(String question, String answer1, String answer2,
        String answer3, String answer4, int correctAnswer) {
      this.question = question;

      this.answer1 = answer1;

      this.answer2 = answer2;

      this.answer3 = answer3;

      this.answer4 = answer4;

      this.correctAnswer = correctAnswer;
    }

    public String getQuestion() {
      return question;
    }

    public String getAnswer1() {
      return answer1;
    }

    public String getAnswer2() {
      return answer2;
    }

    public String getAnswer3() {
      return answer3;
    }

    public String getAnswer4() {
      return answer4;
    }

    public boolean isCorrect(int answer) {
      return answer == correctAnswer;
    }
  }
}
